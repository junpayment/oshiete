// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/oshiete.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/junpayment/oshiete/models"
	reflect "reflect"
)

// MockOshieteService is a mock of OshieteService interface
type MockOshieteService struct {
	ctrl     *gomock.Controller
	recorder *MockOshieteServiceMockRecorder
}

// MockOshieteServiceMockRecorder is the mock recorder for MockOshieteService
type MockOshieteServiceMockRecorder struct {
	mock *MockOshieteService
}

// NewMockOshieteService creates a new mock instance
func NewMockOshieteService(ctrl *gomock.Controller) *MockOshieteService {
	mock := &MockOshieteService{ctrl: ctrl}
	mock.recorder = &MockOshieteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOshieteService) EXPECT() *MockOshieteServiceMockRecorder {
	return m.recorder
}

// Eru mocks base method
func (m *MockOshieteService) Eru(key, answer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eru", key, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Eru indicates an expected call of Eru
func (mr *MockOshieteServiceMockRecorder) Eru(key, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eru", reflect.TypeOf((*MockOshieteService)(nil).Eru), key, answer)
}

// Ete mocks base method
func (m *MockOshieteService) Ete(key string) (*models.EteAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ete", key)
	ret0, _ := ret[0].(*models.EteAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ete indicates an expected call of Ete
func (mr *MockOshieteServiceMockRecorder) Ete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ete", reflect.TypeOf((*MockOshieteService)(nil).Ete), key)
}
